use crate::enums::{OrderSide, OrderType};
use chrono::{DateTime, Utc};
use rust_decimal::Decimal;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

/// Represents a single candlestick bar (K-line).
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, sqlx::FromRow)]
#[sqlx(type_name = "klines")]
pub struct Kline {
    pub open_time: DateTime<Utc>,
    pub open: Decimal,
    pub high: Decimal,
    pub low: Decimal,
    pub close: Decimal,
    pub volume: Decimal,
    pub close_time: DateTime<Utc>,
    // The interval this kline represents, e.g., "1m", "5m", "1h".
    pub interval: String,
}

/// Represents a request to place an order. This is an instruction, not a confirmation of execution.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrderRequest {
    /// A unique identifier for the order generated by our system.
    pub client_order_id: Uuid,
    pub symbol: String,
    pub side: OrderSide,
    pub order_type: OrderType,
    pub quantity: Decimal,
    /// For LIMIT orders, this is the price. For MARKET orders, this is None.
    pub price: Option<Decimal>,
}

/// Represents a confirmed trade execution from the exchange.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Execution {
    pub execution_id: Uuid,
    pub client_order_id: Uuid,
    pub symbol: String,
    pub side: OrderSide,
    pub price: Decimal,
    pub quantity: Decimal,
    pub fee: Decimal,
    pub fee_asset: String,
    pub timestamp: DateTime<Utc>,
}

/// A higher-level construct representing a complete, self-contained trade (e.g., one entry and one exit).
/// Used primarily for analytics and performance tracking.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Trade {
    pub trade_id: Uuid,
    pub symbol: String,
    pub entry_execution: Execution,
    pub exit_execution: Execution,
}

/// Represents the current state of an open position for a single asset.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Position {
    pub position_id: Uuid,
    pub symbol: String,
    pub side: OrderSide,
    pub quantity: Decimal,
    pub entry_price: Decimal,
    pub unrealized_pnl: Decimal,
    pub last_updated: DateTime<Utc>,
}

/// Represents a trading signal generated by a strategy. It includes the desired order and metadata.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Signal {
    pub signal_id: Uuid,
    pub timestamp: DateTime<Utc>,
    pub order_request: OrderRequest,
    /// A score from 0.0 to 1.0 indicating the strategy's confidence in this signal.
    pub confidence: Decimal,
}

