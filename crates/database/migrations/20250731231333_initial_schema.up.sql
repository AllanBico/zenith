-- Zenith V2 Initial Database Schema
-- This migration sets up all the tables required for the application.

-- Add migration script here
-- We use TIMESTAMPTZ to store timestamps with timezone information (UTC).
-- We use TEXT for string-based identifiers like symbols and intervals.
-- We use DECIMAL for high-precision financial data.
-- We use UUID for unique identifiers generated by the application.
-- We use JSONB for storing flexible, schemaless data like strategy parameters.

-- Stores raw historical candlestick data.
CREATE TABLE klines (
    symbol TEXT NOT NULL,
    interval TEXT NOT NULL,
    open_time TIMESTAMPTZ NOT NULL,
    open DECIMAL NOT NULL,
    high DECIMAL NOT NULL,
    low DECIMAL NOT NULL,
    close DECIMAL NOT NULL,
    volume DECIMAL NOT NULL,
    PRIMARY KEY (symbol, interval, open_time)
);

-- Top-level record for an optimization job.
CREATE TABLE optimization_jobs (
    job_id UUID PRIMARY KEY,
    strategy_id TEXT NOT NULL,
    symbol TEXT NOT NULL,
    job_status TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Represents a single backtest run, linked to an optimization job.
-- This is the core table for enabling resumable optimizations.
CREATE TABLE backtest_runs (
    run_id UUID PRIMARY KEY,
    job_id UUID REFERENCES optimization_jobs(job_id) ON DELETE CASCADE,
    parameters JSONB NOT NULL,
    run_status TEXT NOT NULL, -- e.g., 'Pending', 'Completed', 'Failed'
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Stores the full performance report for a completed backtest run.
CREATE TABLE performance_reports (
    report_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    run_id UUID NOT NULL UNIQUE REFERENCES backtest_runs(run_id) ON DELETE CASCADE,
    total_net_profit DECIMAL NOT NULL,
    gross_profit DECIMAL NOT NULL,
    gross_loss DECIMAL NOT NULL,
    profit_factor DECIMAL,
    total_return_pct DECIMAL NOT NULL,
    max_drawdown DECIMAL NOT NULL,
    max_drawdown_pct DECIMAL NOT NULL,
    sharpe_ratio DECIMAL,
    calmar_ratio DECIMAL,
    total_trades INTEGER NOT NULL,
    winning_trades INTEGER NOT NULL,
    losing_trades INTEGER NOT NULL,
    win_rate_pct DECIMAL,
    average_win DECIMAL NOT NULL,
    average_loss DECIMAL NOT NULL,
    payoff_ratio DECIMAL,
    average_holding_period TEXT NOT NULL -- Stored as human-readable string
);

-- Stores every individual trade executed during a backtest.
CREATE TABLE trades (
    trade_id UUID PRIMARY KEY,
    run_id UUID NOT NULL REFERENCES backtest_runs(run_id) ON DELETE CASCADE,
    symbol TEXT NOT NULL,
    entry_price DECIMAL NOT NULL,
    entry_qty DECIMAL NOT NULL,
    entry_timestamp TIMESTAMPTZ NOT NULL,
    exit_price DECIMAL NOT NULL,
    exit_qty DECIMAL NOT NULL,
    exit_timestamp TIMESTAMPTZ NOT NULL
);

-- Stores the time-series data of the portfolio's value during a backtest.
CREATE TABLE equity_curves (
    run_id UUID NOT NULL REFERENCES backtest_runs(run_id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    equity DECIMAL NOT NULL,
    PRIMARY KEY (run_id, timestamp)
);

-- Create indexes for frequently queried columns to improve performance.
CREATE INDEX idx_backtest_runs_job_id_status ON backtest_runs (job_id, run_status);
CREATE INDEX idx_trades_run_id ON trades (run_id);