//! # Zenith Risk Management Engine
//!
//! This crate acts as the financial gatekeeper between a strategy's signal
//! and the final trade execution. Its sole purpose is to evaluate a raw trade
//! signal and apply a set of rules to determine the final, safe position size.
//!
//! ## Architectural Principles
//! - **Layer 1 Logic:** A pure logic crate that depends only on `core-types`, `events`, and `configuration`.
//! - **Decoupling:** Separates the logic of "finding a pattern" (strategies) from the
//!   logic of "managing money" (risk).
//!
//! ## Public API
//! - `RiskManager`: The core trait that defines the interface for all risk modules.
//! - `SimpleRiskManager`: The concrete implementation of our fixed-fractional sizing logic.
//! - `RiskError`: The specific error types that can be returned from this crate.

use crate::error::RiskError;
use core_types::{OrderRequest, Signal};
use events::PortfolioState;
use rust_decimal::Decimal;

// Declare the modules that constitute this crate.
pub mod error;
pub mod simple_manager;

// Re-export the public components to provide a clean API.
pub use error::RiskError;
pub use simple_manager::SimpleRiskManager;

/// The core trait that all risk management modules must implement.
///
/// It defines the standard interface for evaluating a strategy signal against
/// the portfolio's state and risk parameters. The `Send + Sync` bounds are
/// required to allow the risk manager to be used across multiple threads.
pub trait RiskManager: Send + Sync {
    /// Evaluates a raw strategy signal and returns a new, risk-managed OrderRequest.
    ///
    /// # Arguments
    /// * `signal`: The raw `Signal` generated by a strategy.
    /// * `portfolio_state`: The current state of the portfolio, primarily used to get total equity.
    /// * `entry_price`: The current market price, used as the basis for calculating stop-loss distance.
    ///
    /// # Returns
    /// A `Result` containing either:
    /// - `Ok(OrderRequest)`: A new order request with a precisely calculated quantity.
    /// - `Err(RiskError)`: An error indicating why the trade cannot be sized or placed.
    fn evaluate_signal(
        &self,
        signal: &Signal,
        portfolio_state: &PortfolioState,
        entry_price: Decimal,
    ) -> Result<OrderRequest, RiskError>;
}